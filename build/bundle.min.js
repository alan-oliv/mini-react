
(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
'use strict';

(function (l, i, v, e) {
  v = l.createElement(i);
  v.async = 1;
  v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1';
  e = l.getElementsByTagName(i)[0];
  e.parentNode.insertBefore(v, e);
})(document, 'script');

(function (l, i, v, e) {
  v = l.createElement(i);
  v.async = 1;
  v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1';
  e = l.getElementsByTagName(i)[0];
  e.parentNode.insertBefore(v, e);
})(document, 'script');
/* eslint-disable no-console */


var reconciler = {
  queue: [],
  nextMessage: null,
  addMessage: function addMessage(message) {
    var queue = reconciler.queue;
    queue.push(message);
    console.log('addMessage: ', message, queue);
  },
  consumeMessage: function consumeMessage(timeLimit) {
    console.log('consumeMessage: ', timeLimit);
  }
};
/* eslint-disable no-console */

var MiniReactDOM = {
  render: function render(element, container) {
    var addMessage = reconciler.addMessage;
    var message = {
      from: 'host',
      dom: container,
      newProps: {
        children: element
      }
    };
    addMessage(message); // if (element.render) element = element.render();
    // let { type = null, props = [] } = element;
    // const { children = [] } = props;
    // if (typeof type === FUNCTION) {
    //   element = new type(props).render();
    //   ({ type, props } = element);
    // }
    // const newElement =
    //   type === TEXT_TYPE
    //     ? document.createTextNode(props.textContent)
    //     : document.createElement(type);
    // Object.keys(props)
    //   .filter(name => !NOT_ATTRIBUTES.includes(name))
    //   .forEach(name => {
    //     newElement[name] = props[name];
    //   });
    // children.forEach(child => MiniReactDOM.render(child, newElement));
    // container.appendChild(newElement);
  }
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

(function (l, i, v, e) {
  v = l.createElement(i);
  v.async = 1;
  v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1';
  e = l.getElementsByTagName(i)[0];
  e.parentNode.insertBefore(v, e);
})(document, 'script');

function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  return Constructor;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
} // import { reconciler } from 'mini-react-reconciler';


var Component =
/*#__PURE__*/
function () {
  function Component() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck$1(this, Component);

    if (props) {
      this.props = props;
      this.state = this.state || {};
    }
  }

  _createClass$1(Component, [{
    key: "setState",
    value: function setState(newState) {
      this.state = Object.assign(this.state, newState()); // console.log(MiniReactDOM);
      // reconciler();
    }
  }]);

  return Component;
}();
/* eslint-disable */


var Node = function Node(_ref) {
  var tagName = _ref.tagName,
      _ref$props = _ref.props,
      props = _ref$props === void 0 ? {} : _ref$props,
      componentClass = _ref.componentClass,
      rest = _objectWithoutProperties(_ref, ["tagName", "props", "componentClass"]);

  var type = tagName ? tagName : componentClass;
  Object.assign(props, rest);
  return {
    type: type,
    props: props
  };
};

var LimitLabel =
/*#__PURE__*/
function (_Component) {
  _inherits(LimitLabel, _Component);

  function LimitLabel(props) {
    _classCallCheck(this, LimitLabel);

    return _possibleConstructorReturn(this, _getPrototypeOf(LimitLabel).call(this, props));
  }

  _createClass(LimitLabel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          maxLimit = _this$props.maxLimit,
          definedLimit = _this$props.definedLimit;
      return Node({
        tagName: 'p',
        textContent: "R$ ".concat(maxLimit - definedLimit, " dispon\xEDveis")
      });
    }
  }]);

  return LimitLabel;
}(Component);

var App =
/*#__PURE__*/
function (_Component) {
  _inherits(App, _Component);

  function App(props) {
    var _this;

    _classCallCheck(this, App);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));
    _this.state = {
      definedLimit: 2500,
      maxLimit: 5000
    };
    return _this;
  }

  _createClass(App, [{
    key: "setDefinedLimit",
    value: function setDefinedLimit(e) {
      this.setState(function () {
        return {
          definedLimit: parseInt(e.target.value)
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          maxLimit = _this$state.maxLimit,
          definedLimit = _this$state.definedLimit;
      return Node({
        tagName: 'div',
        children: [Node({
          tagName: 'h1',
          textContent: 'Ajuste de limite'
        }), Node({
          tagName: 'input',
          type: 'text',
          value: definedLimit,
          onkeypress: function onkeypress(e) {
            return _this2.setDefinedLimit(e);
          }
        }), Node({
          componentClass: LimitLabel,
          props: {
            maxLimit: maxLimit,
            definedLimit: definedLimit
          }
        }), Node({
          tagName: 'input',
          type: 'range',
          min: 0,
          max: maxLimit,
          value: definedLimit,
          oninput: function oninput(e) {
            return _this2.setDefinedLimit(e);
          }
        })]
      });
    }
  }]);

  return App;
}(Component);

MiniReactDOM.render(new App(), document.getElementById('root'));
